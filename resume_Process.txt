*** Process ***

 - Sorties standard d'un process : Stdin / Stdout / Stderr

 - Un processus contient 1 à plusieurs threads 

 - Pour creer un processus il faut faire appel a  fork() qui crée un processus fils, exemple dans fork_examples/fork.c : pid_t child= fork(); SI child == 0 alors c'est le fils, pid du fils SINON d'ou la commande wait(NULL) le parent attend que le fils se termine pr qu'il termine 
 
 - fork() crée un processus fils et partage la même mémoire avec le parent(copy on write), mais si le contenu de l'un d'eux est modifié cette memoire sera dupliquée
 
 - getppid(): recupere l'id du processus parent 
 
 - ps : permet de lister les processus en cours d'execution / ps au : tous les processus en cours d'execution sur la machine 
  
 - kill pid : permet de tuer un processus / kill -l : pour lister toutes les possibilités de kill (-2 pid pour sigint : interruption du processus)
  
 - wait : permet d'attendre la fin de l'execution d'un processus en arrière plan
 
 - jobs : liste les processus en arrière plan
 
 - man 2 kill : manuel de la fonction kill en C 
 
 -  /dev/shm : repertoire de la RAM 
 
 - droit d'auteur : rwx | 700 / r-- | 400 :read / -w- | 200 : write / --x | 100 : execute  (proprio, group, other)
 
 - ifndef : c'est pour ne pas inclure trop de fois le fichier 
 
 - -I -L. : la lib est dans le repertoire courant / -lfoo : se lier a la lib foo
 
 - lsblk | df -H | findmnt -D : liste les disques durs et les partitions 
 
 - le e a la fin dans execution (execvpe, execle...) : utilisation d'un environnement 
 
 - include signal.h pour utiliser les signaux 
 
 - SIGWINCH : signal de changement de dimension de fenetre ( SIGNAL WINDOW CHANGE)
 
 - envoie d'un signal toutes les 3 secondes = alarm(3) : envoi de signaux de maniere periodique 
